= mpf - 多倍長浮動小数点数
本章では、多倍長浮動小数点数のmpf_tとmpf_classを扱います。

== mpf_t

=== mpf_tを使う前に

以下に__mpf_struct構造体の定義を示します。実際のgmp.hには各メンバ変数についてコメントが記載されていますが、見やすさ重視のため、長いコメントに関しては削除しています。

//list[][mpf_tの定義(gmp.h)][]{
typedef struct
{
  int _mp_prec;         /* コメント削除 /*
  int _mp_size;         /* コメント削除 /*
  mp_exp_t _mp_exp;     /* Exponent, in the base of `mp_limb_t'.  */
  mp_limb_t *_mp_d;     /* Pointer to the limbs.  */
} __mpf_struct;

typedef __mpf_struct mpf_t[1];
//}

====[notoc] mpf_tのメンバ変数
mpf_tの各メンバ変数を説明します。

 : _mp_prec
    浮動小数点の精度（何ビットまで保証するか）を定める値。

 : _mp_size
    _mp_dが実際に使用している領域のサイズ。_mp_d[0]から順に値を見ていって、最初に0が見つかるインデックス。

 : _mp_exp
    浮動小数点の指数部に相当する。

 : _mp_d
    mp_limb_t配列の先頭アドレス。浮動小数点の仮数部に相当する。

=== mpf_tを使ってみる

====[notoc] 自然対数の底ネイピア数@<m>$e$の計算
ネイピア数@<m>$e$の定義は@<m>$\lim_{t \to \infty} (1 + \frac{1}{t})^{t}$ですが、@<m>$\lim_{t \to \infty}$の表現が大変なので指数関数@<m>$e^{x}$をマクローリン展開して近似します。

//texequation[][]{
\begin{aligned}
e^{1} &=& 1 + 1 + \frac{1}{2!} +  \frac{1}{3!} +  \frac{1}{4!} + \cdots \\
      &=& \sum_{k=0}^{\infty} \frac{1}{k!}
\end{aligned}
//}

//noindent
もちろん無限回の足し算は不可能なので、どこかで計算を打ち切ります。floatやdoubleを使っている場合は、扱える値の範囲の制限があるため足し算の回数はそこまで多くなりません。一方、mpf_tはコンピュータが許す限りの精度で計算できるので、
ほしい精度が得られるまで繰り返せばよいです。

//list[][ネイピア数の計算][]{
#include <iostream>
#include <gmpxx.h>

int main() {
    mpq_t k, t;
    mpq_init(k);
    mpq_init(t);
    mpq_set_ui(k, 2, 1);
    mpq_set_ui(t, 1, 1);

    mpf_t e;
    mpf_init2(e, 1500);

    for (size_t i = 2; i < 250; i++) {
        mpz_mul_ui(&(t->_mp_den), &(t->_mp_den), i);
        mpq_add(k, k, t);
    }

    mpf_set_q(e, k);
    std::cout << "2.7182818284590452353602874713526624977572470936999595749669676277" << std::endl;
    gmp_printf("%.409Ff\n", e);
}
//}

//noindent
上のソースコードをよく見るとmpz, mpq, mpfが全部登場しています。これまでの知識を総動員しているようでなんだか楽しいですね。
mpq関数にはintやuintなどで除算する関数がないので、分母に除数をかけています。

//terminal[][実行結果]{
$ g++ exp.cpp -lgmpxx -lgmp -O3 && ./a.out
2.7182818284590452353602874713526624977572470936999595749669676277
2.7182818284590452353602874713526624977572470936999595749669676277240766303535475945713821785251664274274663919320030599218174135966290435729003342952605956307381323286279434907632338298807531952510190115738341879307021540891499348841675092447614606680822648001684774118537423454424371075390777449920695517027618386062613313845830007520449338265602976067371132007093287091274437470472306969772093101416928368190
//}


== mpf_class

